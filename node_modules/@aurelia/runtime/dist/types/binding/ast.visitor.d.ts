import { CustomExpression } from './ast';
import type { AccessKeyedExpression, AccessMemberExpression, AccessScopeExpression, AccessThisExpression, ArrayBindingPattern, ArrayLiteralExpression, ArrowFunction, AssignExpression, BinaryExpression, BindingBehaviorExpression, BindingIdentifier, CallFunctionExpression, CallMemberExpression, CallScopeExpression, ConditionalExpression, ForOfStatement, Interpolation, ObjectBindingPattern, ObjectLiteralExpression, PrimitiveLiteralExpression, TaggedTemplateExpression, TemplateExpression, UnaryExpression, ValueConverterExpression, DestructuringAssignmentExpression, DestructuringAssignmentSingleExpression, DestructuringAssignmentRestExpression, IsExpressionOrStatement, AccessBoundaryExpression } from './ast';
export interface IVisitor<T = unknown> {
    visitAccessKeyed(expr: AccessKeyedExpression): T;
    visitAccessMember(expr: AccessMemberExpression): T;
    visitAccessScope(expr: AccessScopeExpression): T;
    visitAccessThis(expr: AccessThisExpression): T;
    visitAccessBoundary(expr: AccessBoundaryExpression): T;
    visitArrayBindingPattern(expr: ArrayBindingPattern): T;
    visitArrayLiteral(expr: ArrayLiteralExpression): T;
    visitArrowFunction(expr: ArrowFunction): T;
    visitAssign(expr: AssignExpression): T;
    visitBinary(expr: BinaryExpression): T;
    visitBindingBehavior(expr: BindingBehaviorExpression): T;
    visitBindingIdentifier(expr: BindingIdentifier): T;
    visitCallFunction(expr: CallFunctionExpression): T;
    visitCallMember(expr: CallMemberExpression): T;
    visitCallScope(expr: CallScopeExpression): T;
    visitConditional(expr: ConditionalExpression): T;
    visitForOfStatement(expr: ForOfStatement): T;
    visitInterpolation(expr: Interpolation): T;
    visitObjectBindingPattern(expr: ObjectBindingPattern): T;
    visitObjectLiteral(expr: ObjectLiteralExpression): T;
    visitPrimitiveLiteral(expr: PrimitiveLiteralExpression): T;
    visitTaggedTemplate(expr: TaggedTemplateExpression): T;
    visitTemplate(expr: TemplateExpression): T;
    visitUnary(expr: UnaryExpression): T;
    visitValueConverter(expr: ValueConverterExpression): T;
    visitDestructuringAssignmentExpression(expr: DestructuringAssignmentExpression): T;
    visitDestructuringAssignmentSingleExpression(expr: DestructuringAssignmentSingleExpression): T;
    visitDestructuringAssignmentRestExpression(expr: DestructuringAssignmentRestExpression): T;
    visitCustom(expr: CustomExpression): T;
}
export declare const astVisit: <T>(ast: IsExpressionOrStatement, visitor: IVisitor<T>) => T;
export declare class Unparser implements IVisitor<void> {
    text: string;
    static unparse(expr: IsExpressionOrStatement): string;
    visitAccessMember(expr: AccessMemberExpression): void;
    visitAccessKeyed(expr: AccessKeyedExpression): void;
    visitAccessThis(expr: AccessThisExpression): void;
    visitAccessBoundary(_expr: AccessBoundaryExpression): void;
    visitAccessScope(expr: AccessScopeExpression): void;
    visitArrayLiteral(expr: ArrayLiteralExpression): void;
    visitArrowFunction(expr: ArrowFunction): void;
    visitObjectLiteral(expr: ObjectLiteralExpression): void;
    visitPrimitiveLiteral(expr: PrimitiveLiteralExpression): void;
    visitCallFunction(expr: CallFunctionExpression): void;
    visitCallMember(expr: CallMemberExpression): void;
    visitCallScope(expr: CallScopeExpression): void;
    visitTemplate(expr: TemplateExpression): void;
    visitTaggedTemplate(expr: TaggedTemplateExpression): void;
    visitUnary(expr: UnaryExpression): void;
    visitBinary(expr: BinaryExpression): void;
    visitConditional(expr: ConditionalExpression): void;
    visitAssign(expr: AssignExpression): void;
    visitValueConverter(expr: ValueConverterExpression): void;
    visitBindingBehavior(expr: BindingBehaviorExpression): void;
    visitArrayBindingPattern(expr: ArrayBindingPattern): void;
    visitObjectBindingPattern(expr: ObjectBindingPattern): void;
    visitBindingIdentifier(expr: BindingIdentifier): void;
    visitForOfStatement(expr: ForOfStatement): void;
    visitInterpolation(expr: Interpolation): void;
    visitDestructuringAssignmentExpression(expr: DestructuringAssignmentExpression): void;
    visitDestructuringAssignmentSingleExpression(expr: DestructuringAssignmentSingleExpression): void;
    visitDestructuringAssignmentRestExpression(expr: DestructuringAssignmentRestExpression): void;
    visitCustom(expr: CustomExpression): void;
    private writeArgs;
}
//# sourceMappingURL=ast.visitor.d.ts.map